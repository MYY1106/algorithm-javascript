# 四数之和

## 思路


排序+双指针，整体思路是与三数之和一样的，只是要注意剪枝

```js
/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[][]}
 * @method 排序+双指针，整体思路是与三数之和一样的，只是要注意剪枝
 */
var fourSum = function (nums, target) {
    const record = []
   
    if (nums.length < 4) return record
    
    nums = nums.sort((a, b) => a - b)
    
    let left, right, sum
    for (let i = 0; i < nums.length; i++){
        if (nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3] > target) break // 剪枝  
        // 这里当时有问题就是因为我以为nums[i] > target就能break，其实是要nums[i] + nums[i + 1] + nums[i + 2] + nums[i + 3] > target才能break，三数之和中可以(nums[i] > 0就break是因为0比较特殊
        if (nums[i] === nums[i - 1] && i > 0) continue // 去重 
       
        for (let j = i + 1; j < nums.length; j++){
            if (nums[j] + nums[i] + nums[j + 1] + nums[j + 2] > target) break // 剪枝
            // 这里当时有问题就是因为我以为nums[i] > target就能break，其实是要nums[j] + nums[i] + nums[j + 1] + nums[j + 2] > target才能break，三数之和中可以nums[i] > 0就break是因为0比较特殊
            if (nums[j] === nums[j - 1] && j > i + 1) continue // 去重
            left = j + 1
            right = nums.length - 1

            while (left < right) {
                sum = nums[i] + nums[j] + nums[left] + nums[right]

                if (sum === target) {
                    record.push([nums[i], nums[j], nums[left], nums[right]])
                    do { left++ } while (left < right && nums[left - 1] === nums[left])
                    do { right-- } while (left < right && nums[right + 1] === nums[right])
                } else if (sum > target) {
                    do { right-- } while (left < right && nums[right + 1] === nums[right])
                } else {
                    do { left++ } while (left < right && nums[left - 1] === nums[left])
                }
            }
        }
    }
    return record
};

console.log(fourSum([1, -2, -5, -4, -3, 3, 3, 5], -11));

```
