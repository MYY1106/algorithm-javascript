28. 实现 strStr()

实现 strStr() 函数。

给你两个字符串 haystack 和 needle ，请你在 haystack 字符串中找出 needle 字符串出现的第一个位置（下标从 0 开始）。如果不存在，则返回 - 1 。

说明：

当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。

对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与 C 语言的 strstr() 以及 Java 的 indexOf() 定义相符。

示例 1：

输入：haystack = "hello", needle = "ll"

输出：2

示例 2：

输入：haystack = "aaaaa", needle = "bba"
输出：-1

提示：

1 <= haystack.length, needle.length <= 104
    haystack 和 needle 仅由小写英文字符组成

```js
/**
 * @param {string} haystack
 * @param {string} needle
 * @return {number}'
 * @method 暴力匹配
 */
var strStr = function (haystack, needle) {
    let i = 0, j = 0;
    while (i < haystack.length) {
        if (haystack[i] === needle[0]) {
            const mark = i;
            while (haystack[i] === needle[j] && i < haystack.length && j < needle.length) {
                j++;
                i++;
            }
            if (j === needle.length) {
                return mark;
            }
            j = 0;
            i = mark;
        }
        i++;
    }
    return -1
};
```

```js
/**
 * @param {string} haystack
 * @param {string} needle
 * @return {number}
 * @method KMP算法
 */
var strStr = function (haystack, needle) {
    if (needle.length === 0)
        return 0;

    const getNext = () => {
        const next = [];
        let i = 1, j = 0;
        next.push(j);

        while (i < needle.length) {
            while (j > 0 && needle[i] !== needle[j])
                j = next[j - 1]; // 去找
            if (needle[i] === needle[j])
                j++;
            next.push(j);
            i++;
        }
        return next;
    }

    let next = getNext()
    console.log(next);
    let j = 0;
    for (let i = 0; i < haystack.length; ++i) {
        while (j > 0 && haystack[i] !== needle[j])
            j = next[j - 1];
        if (haystack[i] === needle[j])
            j++;
        if (j === needle.length)
            return (i - needle.length + 1);
    }

    return -1;
};
```
